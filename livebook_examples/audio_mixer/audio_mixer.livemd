# Mixing audio files

```elixir
File.cd(__DIR__)
Logger.configure(level: :error)

Mix.install([
  {:membrane_core, "~> 0.11.2"},
  {:membrane_audio_mix_plugin, "~> 0.12.0"},
  {:membrane_file_plugin, "~> 0.13.0"},
  {:membrane_mp3_mad_plugin, "~> 0.14.0"},
  {:membrane_ffmpeg_swresample_plugin, "~> 0.16.1"},
  {:membrane_aac_fdk_plugin, "~> 0.14.0"},
  {:membrane_kino_plugin, github: "membraneframework-labs/membrane_kino_plugin"}
])
```

## Installation

To run this demo one needs to install native dependencies:

1. [MP3 MAD](https://github.com/membraneframework/membrane_mp3_mad_plugin/tree/v0.14.0#installation)
2. [AAC FDK](https://github.com/membraneframework/membrane_aac_fdk_plugin#installation)
3. [SWResample FFmpeg](https://github.com/membraneframework/membrane_ffmpeg_swresample_plugin#installation)

```elixir
kino = Membrane.Kino.Player.new(:audio)
:ok
```

```elixir
import Membrane.ChildrenSpec
alias Membrane.RemoteControlled, as: RC

alias Membrane.{
  File,
  AudioMixer,
  FFmpeg,
  RawAudio,
  AAC,
  Kino,
  Time,
  MP3
}

alias Membrane.Custom.Filter, as: MyFilter

n_beeps = 30
beep_filepath = "./assets/beep.aac"
background_filepath = "./assets/sample_music_short.mp3"

beeps_audio_inputs =
  for i <- 1..n_beeps do
    child({:file_source, i}, %File.Source{location: beep_filepath})
    |> child({:decoder_aac, i}, AAC.FDK.Decoder)
    |> via_in(:input, options: [offset: Time.seconds(i)])
    |> get_child(:mixer)
  end

background_audio_input =
  child(:file_source, %File.Source{location: background_filepath})
  |> child(:decoder_mp3, MP3.MAD.Decoder)
  |> child(:converter, %FFmpeg.SWResample.Converter{
    input_stream_format: %RawAudio{channels: 2, sample_format: :s24le, sample_rate: 44_100},
    output_stream_format: %RawAudio{channels: 1, sample_format: :s16le, sample_rate: 44_100}
  })
  |> get_child(:mixer)

mixer_output =
  child(:mixer, Membrane.AudioMixer)
  |> child(:encoder_aac, AAC.FDK.Encoder)
  |> via_in(:audio)
  |> child(:player, %Kino.Player.Sink{kino: kino})

structure = beeps_audio_inputs ++ [background_audio_input, mixer_output]
:ok
```

```elixir
kino
```

```elixir
pipeline = RC.Pipeline.start!()
RC.Pipeline.exec_actions(pipeline, spec: structure, playback: :playing)

require RC.Pipeline

# RC.Pipeline.subscribe(pipeline, Membrane.RemoteControlled.Message.EndOfStream)
```
